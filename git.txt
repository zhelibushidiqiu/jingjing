1.在Linux上安装git:
	sudo apt-get install git
	sudo apt-get install git-core	老版本命令
2.因为是 分布式版本控制系统，所以，每个机器必须自报家门：
	git config --global user.name "jingjing"
	git config --global user.email "2286227373@qq.com"
	
	注意 git config 命令的 --global参数，用了这个参数，表示你这台机器上所有的
	git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和邮箱.

3.创建版本库：
	版本库又名仓库，英文名 repository ，你可以简单理解成一个目录，
	这个目录的所有文件都可以被Git管理起来，
	每个文件的修改、删除、Git都能跟踪，以便任何时刻都可以追踪历史
	或者在将来某个时刻可以"还原"
	

	1-所以，创建一个版本库非常简单，首先，选择一个合适的地方，创建一个空目录：
		mkdir jingjing	创建jingjing目录
		cd jingjing	进入到jingjing "里边"
		pwd	显示当前目录所在位置

	**如果使用Windows系统，为了避免遇到各种莫名其妙的问题，请确保目录名(包括父目录)不包含中文

	2-第二步，通过 git init 命令把这个目录变成Git可以管理的仓库：
		git init
		瞬间Git仓库创建好了，而且告诉你是一个空的仓库(empty Git repository)
		
		目录下多了一个 .git 的目录，这个目录是Git来跟踪管理版本库的，没事不要手动修改这个目录的文件
		不然改乱了，就把Git仓库破坏了

		如果没看到 .git ，那是因为这个目录是隐藏的，用 ls -ah 命令可以查看:
			ls -ah
	
	也不一定在空目录下创建仓库，选择一个已经有东西的目录也是可以的，

4.把文件添加到版本库
	首先明确一下，所有的版本控制系统，其实只能跟踪文本文件的改动，
	比如: TXT文件、网页、所有的程序代码等，Git也不例外

	版本控制系统可以告诉你每次的改动，比如在5行添加了一个单词 “Linux”，
	在第8行删除了一个单词“Windows”，

	而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，

	WIndows的 Word、txt 都不能用(编码文件)，建议安装 notepad++ .

		Microsoft的Word格式是 二进制格式，因此，版本控制系统没法跟踪Word文件的改动
		Microsoft开发记事本的团队使用了一个非常弱智的行为来保存 UTF-8编码文件，
		他们自作聪明地在每个文件开头添加了0xefbbbf(十六进制)字符.

	编写一个 readme.txt 文件，一定要放在jingjing目录下(子目录也可以)，
	因为这是一个Git仓库，放到其他地方Git再厉害也找不到这个文件

	1-和把大象放冰箱需要3步相比，把一个文件放到Git仓库只需要两步 .
		第一步，用命令 git add 告诉Git，把文件爱你添加到仓库:
			git add readme.txt
		执行上面命令，没有任何显示，这就对了，Unix的哲学是 “没有消息就是好消息”，说明添加成功

	2-第二步，用命令 git commit 告诉Git，把文件提交到仓库:
		git commit readme.txt -m "自己认识(相当于一个标记)"

		简单解释下，git commit 命令，-m后面输入的是本次提交的说明，可以是任意内容，当然最好有意义
		这样你就能从历史记录里方便地查找到改动记录

		git commit 命令执行成功后会告诉你，1 file changed:一个文件被改动(我们新添加的readme.txt文件)
		2 insertions:插入了两行内容

	为什么Git添加文件需要 add , commit 一共两步呢？因为 commit 可以一次提交很多文件
	所以可以多次 add 不同的文件，比如:
		git add file3.txt
		git add file1.txt file2.txt
		git commit -m "add 3 files."
	
	疑难解答:
		Git命令必须在Git仓库目录内执行，(git init 除外)，在仓库目录外执行是没有意义的.

		添加某个文件时，该文件必须在当前目录下，用 ls 或者 dir 命令查看的到，

	大姐姐:
		初始化一个仓库，使用 git init 命令.
		
		添加文件到Git仓库，分两步:
		    1-使用命令 git add <file> ，注意，可以反复多次使用，添加多个文件；
		    2-使用命令 git commit -m "message" ，完成
	
5-时光机穿梭:

	git status 命令可以让我们时刻掌握仓库的状态
	git diff 顾名思义就是查看 difference ，显示格式正是Unix通用的diff格式.

	提交 修改 和 提交 新文件 是一样的二步，
		git add <file>
		git commit -m "[Hell]"

	小姐:
		要随时掌握工作区的状态，使用 git status 命令

		如果 git status 告诉你文件有被修改过，用 git diff 可以查看修改内容.

	版本回退:
		git log 命令显示从最近到最远的提交日志.
		如果嫌输出信息太多，看的眼花缭乱，可以加上 --pretty=oneline 参数

		看到的一大串类似 26c0bb1... 的是 commit id(版本号)，和SVN不同，Git的不是1,2,3... 递增的数字
		而是一个 SHA1(加密算法)计算出来的非常大的数字，用十六进制表示，
		而且看到的 commit id 绝对不一样，
		因为Git是 分布式的版本控制系统，后边还要研究多人在同一个版本库工作，
		大家都用1,2，3.. 作为版本号，那肯定就冲突了

		每提交一个新版本，实际上Git就会把它们自动穿成一条时间线，
		如果使用可视化工具查看Git历史，就可以更清楚地看到提交历史的时间线

		好了，现在启动时光穿梭机，回到上一个版本该怎么做?
			首先，Git必须知道当前是那个版本，
			在Git中 HEAD 表示当前版本，也就是最新提交的26c0bb1....
			上一个版本是 HEAD^ 上上个版本就是 HEAD^^
			当然往上100个版本写100个 ^比较容易数不过来，所以写成 HEAD~100

		现在把版本回到<add update files.>可以使用 git reset 命令:
			git reset --hard HEAD^
			最新版本已经看看不到了，怎么回去
		只要窗口没关闭，往上找到<大姐姐>的 commit id 是26c0bb1... ，于是就可以回到未来的某个版本:
			git reset --hard 26c0bb
			版本号没必要写全，前几位就可以了(5)，Git会自动找，避免重复，多写几位
			
		Git版本回退速度非常快，因为Git在内部有个指向当前版本的HEAD指针，当你回退版本的时候，
		只是把HEAD指向 <大姐姐>,然后顺便吧工作区文件更新了，所以你让HEAD指向哪个版本号
		你就把当前版本定位在哪.

		现在回退到某个版本，关了电脑，第二天早上后悔了，想恢复到新版本怎么办?
		在Git中总是有后悔药吃，
		当用 git reset --hard HEAD^ 回退到上一个版本，想恢复最新的版本，
		必须找到 最新版本的 commit id ，
		Git提供了一个命令 git reflog 用来记录你的每一次命令:
			$ git reflog
		从显示结果可知最新版本的 commit id ，现在又可以用:
			$ git reset --hard <commit id> 回到最新版本

		小姐:
			* HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史间穿梭，
			使用命令 : git reset --hard commit_id
			
			穿梭前使用 git log 可以查看提交历史，以便确定会退到那个版本.
			**要重返未来，用 git reflog 查看命令历史，以便确定回到未来的那个版本.
			
		
		
	
